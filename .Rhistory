golem::fill_desc(
pkg_name = "ForecastingApp", # The Name of the package containing the App
pkg_title = "PhillyRUG Demo Forecasting App", # The Title of the package containing the App
pkg_description = "A simple forecasting application used to demo the process of putting together a Shiny app.", # The Description of the package containing the App
author_first_name = "PhillyRUG", # Your First Name
author_email = "corycutsail@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
golem::fill_desc(
pkg_name = "ForecastingApp", # The Name of the package containing the App
pkg_title = "PhillyRUG Demo Forecasting App", # The Title of the package containing the App
pkg_description = "A simple forecasting application used to demo the process of putting together a Shiny app.", # The Description of the package containing the App
author_first_name = "PhillyRUG", # Your First Name
author_last_name = ''
author_email = "corycutsail@gmail.com", # Your Email
golem::fill_desc(
pkg_name = "ForecastingApp", # The Name of the package containing the App
pkg_title = "PhillyRUG Demo Forecasting App", # The Title of the package containing the App
pkg_description = "A simple forecasting application used to demo the process of putting together a Shiny app.", # The Description of the package containing the App
author_first_name = "PhillyRUG", # Your First Name
author_last_name = '',
author_email = "corycutsail@gmail.com", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
golem::set_golem_options()
usethis::use_lifecycle_badge("Experimental")
usethis::use_readme_rmd(open = FALSE)
usethis::use_lifecycle_badge("Experimental")
usethis::use_news_md(open = FALSE)
golem::use_recommended_tests()
golem::run_dev()
rstudioapi::navigateToFile("dev/02_dev.R")
rstudioapi::navigateToFile("dev/03_deploy.R")
devtools::check()
golem::add_module(name = "name_of_module1", with_test = TRUE) # Name of the module
?golem::add_module
golem::add_module(name = "name_of_module2", with_test = TRUE) # Name of the module
golem::add_module(name = "name_of_module3",open=FALSE, with_test = TRUE) # Name of the module
library(plotly)
library(ggplot2)
plotly::ggplotly(ggplot(iris,aes(x=Sepal.Length,y=Petal.Length,color=Species)))
plotly::ggplotly(ggplot(iris,aes(x=Sepal.Length,y=Petal.Length,color=Species))) + geom_line()
plotly::ggplotly(ggplot(iris,aes(x=Sepal.Length,y=Petal.Length,color=Species)) + geom_line())
plotly::ggplotly(ggplot(iris,aes(x=Sepal.Length,y=Petal.Length,color=Species))) + geom_point()
plotly::ggplotly(ggplot(iris,aes(x=Sepal.Length,y=Petal.Length,color=Species)) + geom_point())
usethis::use_package('dplyr')
usethis::use_package('ggplot')
usethis::use_package('ggplot2')
usethis::use_package('plotly')
usethis::use_pipe()
iris %>% mutate(species = stringr::str_to_lower(Species))
golem::add_shinyappsio_file()
rsconnect::deployApp()
install.packages('rsconnect')
rsconnect::deployApp()
golem::run_dev()
?usethis::use_data
usethis::use_data(iris)
?plotly::plotlyOutput()
app_ui <- function(request) {
tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
# Your application UI logic
fluidPage(
h1("ForecastingApp"),
h5('hello world'),
plotly::plotlyOutput('plot')
)
)
}
app_server <- function(input, output, session) {
# Your application server logic
output$plot <- plotly::renderPlotly(
)
}
shinyApp(
ui =   tagList(
# Leave this function for adding external resources
golem_add_external_resources(),
# Your application UI logic
fluidPage(
h1("ForecastingApp"),
h5('hello world'),
plotly::plotlyOutput('plot')
)
),
server = function(input, output) {
# Your application server logic
output$plot <- plotly::renderPlotly(
plotly::ggplotly(ggplot2::ggplot(iris,ggplot2::aes(x=Sepal.Length,y=Petal.Length,color=Species)) +
ggplot2::geom_point())
)
}
)
shinyApp(
ui =   tagList(
# Leave this function for adding external resources
# Your application UI logic
fluidPage(
h1("ForecastingApp"),
h5('hello world'),
plotly::plotlyOutput('plot')
)
),
server = function(input, output) {
# Your application server logic
output$plot <- plotly::renderPlotly(
plotly::ggplotly(ggplot2::ggplot(iris,ggplot2::aes(x=Sepal.Length,y=Petal.Length,color=Species)) +
ggplot2::geom_point())
)
}
)
golem::run_dev()
golem::run_dev()
golem::run_dev()
tmp_reactive_iris <- reactive_iris()
tmp_reactive_iris
golem::run_dev()
golem::run_dev()
golem::run_dev()
